head	1.26;
access;
symbols;
locks; strict;
comment	@# @;


1.26
date	2001.03.08.18.54.41;	author doogie;	state Exp;
branches;
next	1.25;

1.25
date	2001.03.08.18.13.31;	author doogie;	state Exp;
branches;
next	1.24;

1.24
date	2001.03.08.18.07.32;	author doogie;	state Exp;
branches;
next	1.23;

1.23
date	2001.03.05.18.16.27;	author doogie;	state Exp;
branches;
next	1.22;

1.22
date	2001.03.05.18.10.58;	author doogie;	state Exp;
branches;
next	1.21;

1.21
date	2001.03.05.09.50.30;	author doogie;	state Exp;
branches;
next	1.20;

1.20
date	2001.03.03.01.39.37;	author doogie;	state Exp;
branches;
next	1.19;

1.19
date	2001.03.03.00.06.48;	author doogie;	state Exp;
branches;
next	1.18;

1.18
date	2001.03.01.22.19.21;	author doogie;	state Exp;
branches;
next	1.17;

1.17
date	2001.02.27.02.39.04;	author doogie;	state Exp;
branches;
next	1.16;

1.16
date	2001.02.24.00.57.24;	author doogie;	state Exp;
branches;
next	1.15;

1.15
date	2001.02.21.20.28.08;	author doogie;	state Exp;
branches;
next	1.14;

1.14
date	2001.02.20.22.47.57;	author doogie;	state Exp;
branches;
next	1.13;

1.13
date	2001.02.20.03.31.03;	author doogie;	state Exp;
branches;
next	1.12;

1.12
date	2001.02.17.20.05.29;	author doogie;	state Exp;
branches;
next	1.11;

1.11
date	2000.02.08.20.43.45;	author doogie;	state Exp;
branches;
next	1.10;

1.10
date	2000.02.07.22.42.31;	author doogie;	state Exp;
branches;
next	1.9;

1.9
date	2000.02.06.03.33.32;	author doogie;	state Exp;
branches;
next	1.8;

1.8
date	2000.01.29.22.33.56;	author joey;	state Exp;
branches;
next	1.7;

1.7
date	2000.01.29.22.18.34;	author joey;	state Exp;
branches;
next	1.6;

1.6
date	2000.01.29.22.06.47;	author joey;	state Exp;
branches;
next	1.5;

1.5
date	2000.01.29.21.53.04;	author joey;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.29.19.26.37;	author joey;	state Exp;
branches;
next	1.3;

1.3
date	2000.01.29.17.22.01;	author joey;	state Exp;
branches;
next	1.2;

1.2
date	2000.01.29.16.58.41;	author joey;	state Exp;
branches;
next	1.1;

1.1
date	2000.01.29.16.15.46;	author joey;	state Exp;
branches;
next	;


desc
@@


1.26
log
@Very big change.  compare() is now part of ok(), so that $expected_output
and $output don't get munged at all.  The eval'd script is now a bunch of
say commands, and a few variable assigments.
@
text
@#!/bin/sh
# Regression test framework (modeled on perl's if you can't tell).

set -e
TMPF1=$(mktemp $(/bin/pwd)/regress.XXXXXX)
TMPF2=$(mktemp $(/bin/pwd)/regress.XXXXXX)
trap 'rm -rf $TMPF1 $TMPF2' 0

# Call this function to test something.
ok () {
	local name expected_return="$2" expected_output="$3" ret output
	testcount=$(($testcount + 1))
	if [ "x$1" != "x" ]; then
		name="$1($testcount)"
	else
		name=$testcount
	fi
	shift 3
	rm -f $TMPF1 $TMPF2	
	set +e
	"$@@" > $TMPF1
	ret=$?
	set -e
	bad=0
	if [ "$expected_return" != "$ret" ]; then
		echo "say \"test $name FAILED: expected return code $expected_return, but got $ret\""
		bad=1
	fi
	output="$(< $TMPF1)"
	if [ ${#output} -eq ${#expected_output} ]; then
		if [ "z$output" != "z$expected_output" ]; then
			echo "say \"test $name FAILED: expected \\\`$expected_output', but got \\\`$output'\""
			bad=1
		fi
	else
		if [ $(wc -c < $TMPF1) -gt 0 ]; then
			echo >> $TMPF1
		fi
		if [ ${#expected_output} -gt 0 ]; then
			echo "$expected_output" > $TMPF2
		else
			: > $TMPF2
		fi
		if ! diff -q $TMPF1 $TMPF2 1>/dev/null; then
			echo "say \"test $name FAILED: expected \\\`$expected_output', but got \\\`$(cat $TMPF1)'\""
			bad=1
		fi
	fi

	if [ $bad = 0 ]; then
		if [ "$VERBOSE" ]; then
			say "\"test $name succeeded\""
		fi
	else
		testfailures=$(($testfailures + 1))
	fi
}

# Call this function last say how many tests you should have run.
tests () {
	echo expected=$1
	echo testcount=$testcount
}

say () {
	if [ -z "$spoke" ]; then
		spoke=1
		echo
	fi
	echo "	$@@"
}

totaltestcount=0
totalfailures=0

if [ "$1" ]; then
	for script in "$@@"; do
		# This part runs a regression test script (which uses the code above),
		# and parses the output to print a human-readable summary.
			
		spoke=""
		echo -n Beginning test of $script ..
		testcount=0
		testfailures=0
		eval "$(. $script || echo woah)"
		if [ "$expected" -a "$expected" != "$testcount" ]; then
			say "($expected tests were expected, but $testcount were run)"
		fi
		if [ "$testfailures" != 0 ]; then
			echo ".. $testfailures test(s)(of $expected) FAILED."
		else
			if [ "$spoke" ]; then
				echo -n ".."
			fi		
			echo " all test(s) successful."
		fi

		totalfailures=$(($totalfailures + $testfailures)) || true
		totaltestcount=$(($totaltestcount + $testcount)) || true
	done
	echo
	echo "Regression test summary:"
	echo "	A total of $totaltestcount individual tests were ran,"
	echo -n "	from $(($#)) regression test scripts. "
	if [ "$totalfailures" != 0 ]; then
		echo "Of those, $totalfailures tests FAILED."
		exit 1
	else
		echo "All succeeded."
	fi
fi
@


1.25
log
@Remove unneeded variable set.
@
text
@d5 3
a7 2
TMPF=$(mktemp $(/bin/pwd)/regress.XXXXXX)
trap 'rm -rf $TMPF' 0
d11 7
a17 1
	local name="$1" expected_return="$2" expected_output="$3" ret
d19 1
a19 5
	
	fixup() {
		sed 's/'"'/'"'\\'"''/g;s,"'\n,\\,'
	}
	testcount=$(($testcount + 1))
d21 1
a21 1
	"$@@" > $TMPF
a22 2
	local IFS=""
	echo "compare '$(echo "$name" | fixup)' '$testcount' '$(echo "$expected_output" | fixup)' '$expected_return' '$(fixup < $TMPF)' $ret"
d24 33
a62 37
}

# This is uber-disgusing. Our IFS is messed up, so this gets the full output
# of the test program. It then parses it.
compare () {
	local id
	while :; do
		local name="$1" count="$2" expected_output="$3" expected_return="$4" output="$5" return="$6" bad=0
		shift 6
		if [ "x$name" != "x" ]; then
			id="$name($count)"
		else
			id=$count
		fi
		if [ "$expected_return" != "$return" ]; then

			say "test $id FAILED: expected return code $expected_return, but got $return"
			bad=1
		fi
		if [ "x$expected_output" != "x$output" ]; then
			say "test $id FAILED: expected \`$expected_output', but got \`$output'"
			bad=1
		fi
		if [ $bad = 0 ]; then
			if [ "$VERBOSE" ]; then
				say "test $id succeeded"
			fi
		else
			testfailures=$(($testfailures + 1))
		fi
		
		if [ "$1" != compare ]; then
			break
		fi
		shift
	done
	eval "$@@"
@


1.24
log
@If both the return code and output didn't match, the error was being
counted twice.
@
text
@a32 1
testfailures=0
@


1.23
log
@Enclose $@@ in double quotes.
@
text
@a46 1
			testfailures=$(($testfailures + 1))
a50 1
			testfailures=$(($testfailures + 1))
d57 2
@


1.22
log
@Print out both a non-matching return code and non-matching output.
@
text
@d66 1
a66 1
	eval $@@
@


1.21
log
@All shell metacharacters are now supported in variable and method values.
This includes the following characters(delimited by ':'):
:`~!@@#$%^&*(){}[]|\;'"<>? ]:  No special translation is done by shoop on
these characters, only proper quoting is used to make sure everything stays
the way the caller intended.
@
text
@d1 1
a1 1
#!/bin/sh -e
d4 1
d37 1
a37 1
		local name="$1" count="$2" expected_output="$3" expected_return="$4" output="$5" return="$6"
d48 8
a55 1
		elif [ "x$expected_output" = "x$output" ]; then
a58 3
		else
			say "test $id FAILED: expected \`$expected_output', but got \`$output'"
			testfailures=$(($testfailures + 1))
@


1.20
log
@Handle ! in $name and $expected_output/$real_output when comparing the
values.
@
text
@d13 1
a13 1
		sed s/"'"/"''"'/g;s,\n,\\,'
@


1.19
log
@Use an internal function 'fixup' to correct special chars in $name,
$expected_output, and $real_output.
@
text
@d38 1
a38 1
		if [ "$name" ]; then
d47 1
a47 1
		elif [ "$expected_output" = "$output" ]; then
@


1.18
log
@Properply handle \n and ' in expected_output and real_output.
@
text
@d12 3
d20 1
a20 1
	echo "compare '$name' '$testcount' '$(echo "$expected_output" | sed s/"'"/"''"'/g;s,\n,\\,')' '$expected_return' '$(sed s/"'"/"''"'/g;s,\n,\\,' < $TMPF)' $ret"
@


1.17
log
@Quote $expected_output.
@
text
@a12 1
	echo -n "compare '$name' '$testcount' '$(echo "$expected_output" | sed "s/'/''/g")' '$expected_return' '"
d16 2
a17 2
	sed "s/'/''/g" < $TMPF
	echo "' $ret"
d66 1
a66 1
	echo "	$*"
d81 1
a81 1
		eval `. $script || echo woah`
@


1.16
log
@Support "'" in expected_output and real_output.
@
text
@d13 1
a13 1
	echo -n "compare '$name' '$testcount' '$(echo $expected_output | sed "s/'/''/g")' '$expected_return' '"
@


1.15
log
@Various fixes to make it behave better under zsh's ksh emulation.  It does
not work under pure zsh, however, due to what appears to be a bug in zsh.
Shoop also currently works in ksh, bash, and ash.
@
text
@d4 3
d9 1
a9 1
	local name="$1" expected_return="$2" expected_output="$3"
d13 1
a13 1
	echo -n "compare '$name' '$testcount' '$expected_output' '$expected_return' '"
d15 4
a18 2
	"$@@"
	echo "' $?"
@


1.14
log
@When showing the count of tests that fail for each script, also show the
expected test count for that script.
@
text
@d6 1
a6 1
	local name=$1 expected_return=$2 expected_output=$3
d27 1
d29 1
a29 1
		local name=$1 count=$2 expected_output=$3 expected_return=$4 output=$5 return=$6 id
@


1.13
log
@testfailures wasn't being reset to 0 at the start of each test script.
@
text
@d81 1
a81 1
			echo ".. $testfailures test(s) FAILED."
@


1.12
log
@Fix handling of multiple regression scripts.
@
text
@d75 1
@


1.11
log
@Add the ability to give a symbolic name to a test.
@
text
@d71 1
a71 3
		script=$1
		shift
	
a90 1

d94 1
a94 1
	echo -n "	from $(($# + 1)) regression test scripts. "
@


1.10
log
@Correctly handle spaces in arguments when passed to ok().
@
text
@d6 2
a7 3
	local expected_return=$1
	local expected_output=$2
	shift 2
d10 1
a10 1
	echo -n "compare $testcount '$expected_output' $expected_return '"
d28 7
a34 3
		local count=$1 expected_output=$2 expected_return=$3
		local output=$4 return=$5
		
d36 2
a37 1
			say "test $count FAILED: expected return code $expected_return, but got $return"
d41 1
a41 1
				say "test $count succeeded"
d44 1
a44 1
			say "test $count FAILED: expected \`$expected_output', but got \`$output'"
a47 1
		shift 5
@


1.9
log
@Add quotes (`') around expected and actual output.
@
text
@d13 1
a13 1
	$@@
@


1.8
log
@More regression tests, reformatted summary.
@
text
@d40 1
a40 1
			say "test $count FAILED: expected $expected_output, but got $output"
@


1.7
log
@test summary
@
text
@d93 2
a94 2
	echo
	echo "A total of $totaltestcount individual tests were ran, from $(($# + 1)) regression test scripts."
a95 1
		echo
@


1.6
log
@* Regress can act on multiple scripts now.
* Added more regression tests.
@
text
@d10 1
a10 1
	testcount=$(expr $testcount + 1)
d34 1
a34 1
			testfailures=$(expr $testfailures + 1)
d41 1
a41 1
			testfailures=$(expr $testfailures + 1)
d61 38
a98 15
for script in "$@@"; do
	# This part runs a regression test script (which uses the code above),
	# and parses the output to print a human-readable summary.
	script=$1
	shift

	spoke=""
	echo -n Beginning test of $script ..
	testcount=0
	eval `. $script || echo woah`
	if [ "$expected" -a "$expected" != "$testcount" ]; then
		say "($expected tests were expected, but $testcount were run)"
	fi
	if [ "$testfailures" != 0 ]; then
		echo ".. $testfailures test(s) FAILED."
d100 1
a100 4
		if [ "$spoke" ]; then
			echo -n ".."
		fi		
		echo " all test(s) successful."
d102 1
a102 1
done
@


1.5
log
@prettified output
@
text
@d24 2
a39 1
			spoke=1
d61 1
a61 1
if [ "$1" ]; then
d72 1
a72 1
		say "$expected tests were expected, but $testcount were run."
d82 1
a82 1
fi
@


1.4
log
@redundancies
@
text
@d31 1
a31 1
			echo "	test $count FAILED: expected return code $expected_return, but got $return"
d35 1
a35 1
				echo "	test $count succeeded"
d38 2
a39 1
			echo "	test $count FAILED: expected $expected_output, but got $output"
d52 8
d66 2
a67 1
	echo Beginning test of $script ..
d71 1
a71 1
		echo "$expected tests were expected, but $testcount were run."
d74 1
a74 1
		echo "$testfailures test(s) FAILED."
d76 4
a79 1
		echo ".. all test(s) successful."
@


1.3
log
@Can now check return codes.
@
text
@d44 1
a44 1
			break 1
d46 1
a46 1
		shift 1
@


1.2
log
@Testing code works now.
@
text
@d6 3
a8 2
	expected=$1
	shift
d11 1
a11 1
	echo -n "compare $testcount '$expected' '"
d27 7
a33 1
		if [ "$2" = "$3" ]; then
d35 1
a35 1
				echo "	test $1 succeeded"
d38 1
a38 1
			echo "	test $1 FAILED: expected $2, but got $3"
d41 2
a42 2
	
		shift 4
d47 1
a47 1
	done	
d64 1
a64 1
		echo $testfailures tests FAILED.
d66 1
a66 1
		echo .. all tests successful.
@


1.1
log
@complete rewrite, and file rename.
@
text
@d10 5
a14 7
	echo -n "compare $testcount \"$expected\" \""
	if ! $@@; then
		echo \"
		echo badret $expected $?
	else
		echo \"
	fi
d25 8
a32 3
	if [ "$2" = "$3" ]; then
		if [ "$VERBOSE" ]; then
			echo "	test $1 succeeded"
d34 8
a41 4
	else
		echo "	test $1 FAILED: expected $3, but got $2"
		testfailures=$(expr $testfailures + 1)
	fi
d46 1
a46 1
	# and parses the output, to print a human-readable summary.
d50 1
a50 1
	echo Beginning test of $torun ..
d52 1
a52 1
	eval `. $script` || echo woah!
@

