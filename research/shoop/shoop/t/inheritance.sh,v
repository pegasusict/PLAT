head	1.20;
access;
symbols;
locks; strict;
comment	@# @;


1.20
date	2001.03.08.19.02.12;	author doogie;	state Exp;
branches;
next	1.19;

1.19
date	2001.03.04.11.01.37;	author doogie;	state Exp;
branches;
next	1.18;

1.18
date	2001.02.20.22.48.32;	author doogie;	state Exp;
branches;
next	1.17;

1.17
date	2001.02.17.22.12.40;	author algernon;	state Exp;
branches;
next	1.16;

1.16
date	2000.02.12.12.53.20;	author doogie;	state Exp;
branches;
next	1.15;

1.15
date	2000.02.08.20.43.45;	author doogie;	state Exp;
branches;
next	1.14;

1.14
date	2000.02.06.03.43.52;	author doogie;	state Exp;
branches;
next	1.13;

1.13
date	2000.02.03.05.08.12;	author doogie;	state Exp;
branches;
next	1.12;

1.12
date	2000.02.01.20.32.18;	author doogie;	state Exp;
branches;
next	1.11;

1.11
date	2000.02.01.20.14.06;	author joey;	state Exp;
branches;
next	1.10;

1.10
date	2000.01.29.22.33.56;	author joey;	state Exp;
branches;
next	1.9;

1.9
date	2000.01.29.22.06.47;	author joey;	state Exp;
branches;
next	1.8;

1.8
date	2000.01.29.17.44.04;	author joey;	state Exp;
branches;
next	1.7;

1.7
date	2000.01.29.17.42.19;	author joey;	state Exp;
branches;
next	1.6;

1.6
date	2000.01.29.17.41.40;	author joey;	state Exp;
branches;
next	1.5;

1.5
date	2000.01.29.17.22.01;	author joey;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.29.16.58.41;	author joey;	state Exp;
branches;
next	1.3;

1.3
date	2000.01.29.16.16.10;	author joey;	state Exp;
branches;
next	1.2;

1.2
date	2000.01.29.16.16.01;	author joey;	state Exp;
branches;
next	1.1;

1.1
date	2000.01.29.15.43.32;	author joey;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Because t/regress used to munge variables, several false positives were
being generated.  Now, these should all be fixed.
@
text
@#!/bin/sh -e
# Inheritance regression test. Also sets basic methods and variables.
. ${SHOOPSH:-/usr/share/shoop/shoop.sh}
. ${SHOOPMOD:-/usr/share/shoop/modules}/use.sh

# Setting/getting variables.
ok "" 0 1	OBJECT . counter = 1
ok "" 0 2	OBJECT . counter = 2
ok "" 0 hi	OBJECT . moo = hi
ok "" 0 2	OBJECT . counter
ok "" 0 hi	OBJECT . moo

# Methods.
ok "" 0 ""	OBJECT . count : '$THIS . counter = $(expr $($THIS . counter) + 1)'
ok "" 0 3	OBJECT . count
ok "" 0 4	OBJECT . count

# Multi-level variable and method inheritance.
ok "" 0 ""	OBJECT . new CHILD
ok "" 0 4	CHILD . counter
ok "" 0 ""	CHILD . new GRANDCHILD
ok "" 0 4	GRANDCHILD . counter
ok "" 0 ""	GRANDCHILD . new DESCENDENT
ok "" 0 4	DESCENDENT . counter
ok "" 0 5	OBJECT . count
ok "" 0 6	GRANDCHILD . count

# Inherited variable override.
ok "" 0 6	CHILD . count
ok "" 0 6	DESCENDENT . counter
ok "" 0 7	CHILD . count
ok "" 0 6	OBJECT . count
ok "" 0 6	DESCENDENT . counter
ok "" 0 7	DESCENDENT . count

# calling super
ok "" 0 ""			CHILD . supertest : 'echo -n CHILD'
ok "" 0 ""			GRANDCHILD . supertest : 'echo -n GRAND; $THIS . super'
ok "" 0 "GRANDCHILD"		GRANDCHILD . supertest
ok "" 0 ""			DESCENDENT . supertest : 'echo -n DESCENDENT; $THIS . super'
ok "" 0 "DESCENDENTGRANDCHILD"	DESCENDENT . supertest

# Multiple inheritance.
ok "a" 0 "" OBJECT . new MOTHER
ok "b" 0 "" OBJECT . new FATHER
ok "c" 0 "" OBJECT . new SOMEGUY
ok "d" 0 "" MOTHER . new KID
ok "e" 0 "FATHER MOTHER" KID . parent = FATHER MOTHER
ok "f" 0 blue	MOTHER . eyes = blue
ok "g" 0 blue	KID . eyes
# Inherit from first in list by preference.
ok "" 0 brown	FATHER . eyes = brown
ok "" 0 brown	KID . eyes
ok "" 0 "SOMEGUY MOTHER" KID . parent = SOMEGUY MOTHER
ok "" 0 black	SOMEGUY . eyes = black
ok "" 0 black	KID . eyes
# TODO: What if the parent is not an object?
#ok "" '?' '??'	KID . parent = NOSUCHOBJECT
#ok "" 0 black	KID . eyes
# Inheritance loops should not be allowed.
#ok "" 1 ""		KID . parent = KID
# even spanning multiple parents
#ok "" 0 ""		OBJECT . new PARENT
#ok "" 0 ""		PARENT . new SON
#ok "" 0 "SON"	PARENT . parent = SON
#ok "" 1 ""		SON . count


# Ok, this is a good one.
# when there are more than 2 parents, and the requested method is not
# in the immediate parents, the second-level parents would be
# combined without a space between them, so the resolver wouldn't be
# able to walk into them.  ugh.
ok "" 0 ""		OBJECT . new NOMETH1
ok "" 0 ""		NOMETH1 . new NOMETH2
ok "" 0 ""		NOMETH2 . new NOMETH3
ok "" 0 ""		OBJECT . new METHTEST
ok "" 0 ""		METHTEST . parent .=q NOMETH2 NOMETH3
ok "" 0 ""		NOMETH1 . print :p 'echo -n "$@@"'
ok "" 0 "a b c d"	METHTEST . print a b c d

tests 46
@


1.19
log
@Whee.  Found a very cute bug. When there are more than 2 parents, and the
requested method is not in the immediate parents, the second-level parents
would be combined without a space between them, so the resolver wouldn't be
able to walk into them.  ugh.
@
text
@d79 1
a79 1
ok "" 0 ""		NOMETH1 . print :p 'echo "$@@"'
@


1.18
log
@Test case for cascaded super calls.
@
text
@d68 15
a82 1
tests 39
@


1.17
log
@updated to new shoop.sh paths
@
text
@d37 5
a41 3
ok "" 0 ""		CHILD . supertest : 'echo -n CHILD'
ok "" 0 ""		GRANDCHILD . supertest : 'echo -n GRANDCHILD; $THIS . super'
ok "" 0 "GRANDCHILDCHILD" GRANDCHILD . supertest
d68 1
a68 1
tests 37
@


1.16
log
@s/\t/ /
@
text
@d3 1
a3 1
. ${SHOOPSH:-/usr/bin/shoop.sh}
@


1.15
log
@Add the ability to give a symbolic name to a test.
@
text
@d42 1
a42 1
ok "a" 0 ""	OBJECT . new MOTHER
@


1.14
log
@You no longer need to pass in the current method when calling super.  It
knows automagically. :)
@
text
@d7 5
a11 5
ok 0 1	OBJECT . counter = 1
ok 0 2	OBJECT . counter = 2
ok 0 hi	OBJECT . moo = hi
ok 0 2	OBJECT . counter
ok 0 hi	OBJECT . moo
d14 3
a16 3
ok 0 ""	OBJECT . count : '$THIS . counter = $(expr $($THIS . counter) + 1)'
ok 0 3	OBJECT . count
ok 0 4	OBJECT . count
d19 8
a26 8
ok 0 ""	OBJECT . new CHILD
ok 0 4	CHILD . counter
ok 0 ""	CHILD . new GRANDCHILD
ok 0 4	GRANDCHILD . counter
ok 0 ""	GRANDCHILD . new DESCENDENT
ok 0 4  DESCENDENT . counter
ok 0 5	OBJECT . count
ok 0 6	GRANDCHILD . count
d29 6
a34 6
ok 0 6	CHILD . count
ok 0 6	DESCENDENT . counter
ok 0 7	CHILD . count
ok 0 6	OBJECT . count
ok 0 6  DESCENDENT . counter
ok 0 7	DESCENDENT . count
d37 3
a39 3
ok 0 ""		CHILD . supertest : 'echo -n CHILD'
ok 0 ""		GRANDCHILD . supertest : 'echo -n GRANDCHILD; $THIS . super'
ok 0 "GRANDCHILDCHILD" GRANDCHILD . supertest
d42 7
a48 7
ok 0 ""	OBJECT . new MOTHER
ok 0 "" OBJECT . new FATHER
ok 0 "" OBJECT . new SOMEGUY
ok 0 "" MOTHER . new KID
ok 0 "FATHER MOTHER" KID . parent = FATHER MOTHER
ok 0 blue	MOTHER . eyes = blue
ok 0 blue	KID . eyes
d50 5
a54 5
ok 0 brown	FATHER . eyes = brown
ok 0 brown	KID . eyes
ok 0 "SOMEGUY MOTHER" KID . parent = SOMEGUY MOTHER
ok 0 black	SOMEGUY . eyes = black
ok 0 black	KID . eyes
d56 2
a57 2
#ok '?' '??'	KID . parent = NOSUCHOBJECT
#ok 0 black	KID . eyes
d59 1
a59 1
#ok 1 ""		KID . parent = KID
d61 4
a64 4
#ok 0 ""		OBJECT . new PARENT
#ok 0 ""		PARENT . new SON
#ok 0 "SON"	PARENT . parent = SON
#ok 1 ""		SON . count
@


1.13
log
@Disable parent loop tests for now, until the fix has been better tested.
Use environment vars to get location of shoop.sh and its modules, so that
testing can be done in a tmp install dir.
@
text
@d36 5
d66 1
a66 1
tests 34
@


1.12
log
@Fix typo in comment.
@
text
@d3 2
a4 1
. ./shoop.sh
d51 1
a51 1
#ok ? ??	KID . parent NOSUCHOBJECT
d54 1
a54 1
ok 1 ""		KID . parent = KID
d56 4
a59 2
ok 0 FATHER	KID . parent = FATHER
ok 1 ""		FATHER . parent KID # "I'm my own grandpaw.."
d61 1
a61 1
tests 37
@


1.11
log
@Added tests
@
text
@d49 1
a49 1
# TODO: What is the parent is not an object?
@


1.10
log
@More regression tests, reformatted summary.
@
text
@a4 3
# Accessing undefined stuff.
ok 1 "" OBJECT . no_such_property 2>/dev/null

d17 1
a17 1
# Multi-level variable and inheritance.
d35 22
a56 16
# Inherited method turned into a variable.
ok 0 99	CHILD . count = 99
ok 0 99	CHILD . count
ok 0 99	CHILD . count

# Inherited variable turned into method.
ok 0 ""	GRANDCHILD . count : '$THIS . counter = $(expr $($THIS . counter) + 10)'
ok 0 0	GRANDCHILD . counter = 0
ok 0 10	GRANDCHILD . count
ok 0 20	GRANDCHILD . count

# Inherited method override, with super call.
ok 0 1	DESCENDENT . counter = 1
ok 0 ""	DESCENDENT . count : \
	'$THIS . counter = $(expr $($THIS . counter) \* 2 + $($THIS . super count))'
ok 0 13	DESCENDENT . count # you do the math..
d58 1
a58 1
tests 33
@


1.9
log
@* Regress can act on multiple scripts now.
* Added more regression tests.
@
text
@d5 3
d55 1
a55 1
tests 32
@


1.8
log
@oops, no bug. My fault.
@
text
@d35 18
a52 1
tests 22
@


1.7
log
@corrected test count
@
text
@d25 1
a25 1
ok 0 6	DESCENDENT . count
d32 2
a33 2
ok 0 7  DESCENDENT . counter
ok 0 8	DESCENDENT . count
@


1.6
log
@added tests. Found a bug.
@
text
@d35 1
a35 1
tests 21
@


1.5
log
@Can now check return codes.
@
text
@d15 1
d17 19
a35 1
tests 7
@


1.4
log
@Testing code works now.
@
text
@d6 5
a10 5
ok 1	OBJECT . counter = 1
ok 2	OBJECT . counter = 2
ok hi	OBJECT . moo = hi
ok 2	OBJECT . counter
ok hi	OBJECT . moo
d13 2
a14 1
ok ""	OBJECT . count : '$THIS . counter = $(expr $($THIS . counter) + 1)'
d16 1
a16 1
tests 6
@


1.3
log
@kill that
@
text
@d6 5
a10 5
ok 1 "OBJECT . counter = 1"
ok 2 "OBJECT . counter = 2"
ok hello "OBJECT . moo = hello"
ok 2 "OBJECT . counter"
ok hello "OBJECT . moo"
d12 4
a15 1
tests 5
@


1.2
log
@Use new regress
@
text
@a2 1
. ./t/testlib.sh
@


1.1
log
@Added regression test framework.
@
text
@d13 1
a13 2
# Remember to keep this up-to-date
total 5
@

