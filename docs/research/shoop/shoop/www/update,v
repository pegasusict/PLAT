head	1.13;
access;
symbols;
locks; strict;
comment	@# @;


1.13
date	2000.02.02.09.52.30;	author doogie;	state Exp;
branches;
next	1.12;

1.12
date	2000.02.02.09.48.25;	author doogie;	state Exp;
branches;
next	1.11;

1.11
date	2000.02.02.09.45.59;	author doogie;	state Exp;
branches;
next	1.10;

1.10
date	2000.02.02.09.41.21;	author doogie;	state Exp;
branches;
next	1.9;

1.9
date	2000.02.02.09.40.32;	author doogie;	state Exp;
branches;
next	1.8;

1.8
date	2000.02.02.09.38.00;	author doogie;	state Exp;
branches;
next	1.7;

1.7
date	2000.02.02.09.36.51;	author doogie;	state Exp;
branches;
next	1.6;

1.6
date	2000.02.02.09.33.50;	author doogie;	state Exp;
branches;
next	1.5;

1.5
date	2000.02.02.09.33.19;	author doogie;	state Exp;
branches;
next	1.4;

1.4
date	2000.02.02.09.32.10;	author doogie;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.02.09.31.43;	author doogie;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.02.09.31.09;	author doogie;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.02.09.16.09;	author doogie;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Echo a message, and the date, when cvspulsing(which will be seen in cvs),
and have the logic spawn itself into the background, so cvs can continue.
@
text
@#!/bin/sh -e
GHOME=/home/groups/shoop
ID_FILE=$GHOME/.ssh/identity
HTDOCS=$GHOME/htdocs
if [ "$RUNNING_UNDER_CVS" ]; then
	exec ssh -i $ID_FILE "$@@"
fi
CVS_RSH=$HTDOCS/update
export CVS_RSH
case "$1" in
	www)
		RUNNING_UNDER_CVS=1
		export RUNNING_UNDER_CVS
		date -u
		(cd $HTDOCS;exec cvs update)
	;;
	cvspulse)
		echo "Pulsing webserver to update from cvs on $(date -u)"
		(if lockfile -1 -r 2 $HTDOCS/update.lock 2>/dev/null; then
			# we have obtained the lock on the cvspulse script.
			if lockfile -0 -r 0 $HTDOCS/cvspulse.lock 2>/dev/null; then
				# ok, new pulse active.
				# remove master lock, so other pulses can come in.
				exec >> $GHOME/cvspulse.log 2>&1
				rm -f $HTDOCS/update.lock
				$0 www;
				# We do a loop, so that if while we are reupdating, another
				# pulse comes in, we can be sure that it will still have its
				# changes noticed by this script.
				while [ -e $HTDOCS/cvsflag.lock ]; do
					rm -f $HTDOCS/cvsflag.lock
					$0 www
				done
				rm -f $HTDOCS/cvspulse.lock
			elif lockfile -0 -r 0 $HTDOCS/cvsflag.lock 2>/dev/null; then
				# 2nd(and subsequent) pulses set the above lock
				# flag, which the 1st pulse we see and will do
				# another update from cvs.  We don't have to do anything here.
				: this is a null command, which returns true
			fi
			rm -f $HTDOCS/update.lock
		fi)&
	;;
esac
@


1.12
log
@Echo the date when updating from cvs, which will then show up in the log.
@
text
@d18 2
a19 1
		if lockfile -1 -r 2 $HTDOCS/update.lock 2>/dev/null; then
d42 1
a42 1
		fi
@


1.11
log
@Redirect stderr on lockfile(s) to /dev/null.  Append a log of the session
data to /home/groups/shoop/cvspulse.log.  Also, the script appears to work
now.  Just have to enable it.
@
text
@d14 1
@


1.10
log
@alias rf="rm -rf" :|
@
text
@d17 1
a17 1
		if lockfile -1 -r 2 $HTDOCS/update.lock; then
d19 1
a19 1
			if lockfile -0 -r 0 $HTDOCS/cvspulse.lock; then
d22 1
d33 1
a33 1
			elif lockfile -0 -r 0 $HTDOCS/cvsflag.lock; then
@


1.9
log
@Ah ha! found the little bugger.
@
text
@d31 1
a31 1
				rf -f $HTDOCS/cvspulse.lock
@


1.8
log
@Last checkin fixed the wrong line. :|
@
text
@d22 1
a22 1
				rm -f $HTDOCS/cvspulse.lock
d31 1
@


1.7
log
@Remove the right lockfile. :|
@
text
@d22 1
a22 1
				rm -f $HTDOCS/update.lock
d37 1
a37 1
			rm -f $HTDOCS/cvspulse.lock
@


1.6
log
@I hate shell parsers.
@
text
@d37 1
a37 1
			rm -f $HTDOCS/update.lock
@


1.5
log
@Can't have a null if block.
@
text
@d35 1
a35 1
				: this is a null command(returns true)
@


1.4
log
@damn, don't edit when you're tired.
@
text
@d35 1
@


1.3
log
@syntax error
@
text
@d27 1
a27 1
				while [ -e $HTDOCS/cvsflag.lock ];
@


1.2
log
@Added 'cvspulse' command to script, which should do appropriate locking,
even including handling multiple pulses comming in rapid fire succession,
and making sure all updates are fetched to the website.
@
text
@d27 1
a27 1
				while [ -e $HTDOCS/cvsflag.lock ]; then
@


1.1
log
@Putting this in cvs, so it is easier to manage.
@
text
@d8 1
a8 1
CVS_RSH=$GHOME/update
d10 30
a39 5
if [ "$1" = www ]; then
	RUNNING_UNDER_CVS=1
	export RUNNING_UNDER_CVS
	(cd $HTDOCS;exec cvs update)
fi
@

