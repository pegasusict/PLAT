head	1.14;
access;
symbols;
locks; strict;
comment	@# @;


1.14
date	2001.06.20.19.49.25;	author doogie;	state Exp;
branches;
next	1.13;

1.13
date	2001.02.24.00.58.07;	author doogie;	state Exp;
branches;
next	1.12;

1.12
date	2000.02.15.04.57.27;	author doogie;	state Exp;
branches;
next	1.11;

1.11
date	2000.02.13.04.27.58;	author doogie;	state Exp;
branches;
next	1.10;

1.10
date	2000.02.08.00.20.27;	author doogie;	state Exp;
branches;
next	1.9;

1.9
date	2000.02.06.23.40.53;	author doogie;	state Exp;
branches;
next	1.8;

1.8
date	2000.02.06.04.35.57;	author doogie;	state Exp;
branches;
next	1.7;

1.7
date	2000.02.06.04.16.55;	author doogie;	state Exp;
branches;
next	1.6;

1.6
date	2000.01.29.16.44.42;	author doogie;	state Exp;
branches;
next	1.5;

1.5
date	2000.01.29.05.49.51;	author doogie;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.29.04.52.01;	author doogie;	state Exp;
branches;
next	1.3;

1.3
date	2000.01.29.04.26.34;	author joey;	state Exp;
branches;
next	1.2;

1.2
date	2000.01.29.04.19.18;	author joey;	state Exp;
branches;
next	1.1;

1.1
date	2000.01.29.04.11.06;	author doogie;	state Exp;
branches;
next	;


desc
@@


1.14
log
@POSIX says that variable expansion happens first, before commands are run.
This breaks 'local foo="$@@"'.  So, we separate the call to local, and the
variable assignment, in the $@@ case.
@
text
@#!/bin/sh -e
#
# Serialization module for shoop. Expands the OBJECT class with a serialize
# method, that can dump out machine-readable definitions of objects.
#
# For example: FOO . serialize > FOO.sh; exit
# To restart: . ./FOO.sh
#
# LGPL copyright 2000 by Adam Heath <doogie@@debian.org>

## If you need to save the state of your objects, so that you can later
## restore their internal values, then include this into your shoop
## script.  Any object that you then wish to save should then be done
## with the following syntax:
## 
## C<FOO . serialize &E<gt> save_FOO.sh>
# Enable introspection inside _shoop
_shoop_introspect=1

_shoop_quote="'"
IFS=" " OBJECT . serialize :p '
	local DEFINES A
	local PARENTS=$($THIS . parent 2>/dev/null)
	if [ -z "$2" ]; then
		local DISPLAYOBJ=$THIS oldargs; oldargs="$@@"
		set -- $PARENTS
		if [ "$1" ]; then
			echo "$1 . new $THIS;"
			if [ $# -gt 1 ]; then
				echo "$THIS . parent $PARENTS;"
			fi
			eval _shoopseen_parent=1
		fi
		set -- $oldargs
	fi
	eval DEFINES=\$_shoopdefines_$THIS
	for A in $DEFINES; do
		if eval [ -z \"\$_shoopseen_$A\" ]; then
			eval echo -n "$DISPLAYOBJ . $A\ "
			if eval [ \$_shooptype_${THIS}_$A = variable ]; then
				echo -n "=q "
				$DISPLAYOBJ . $A
			else
				echo -n ": $_shoop_quote"
				IFS=" " eval echo -n "\$_shoop_${THIS}_$A"
				echo -n "$_shoop_quote"
			fi
			echo ";"
			eval local _shoopseen_$A=1
		fi
	done
	if eval [ \"\$_shoopfinal_$DISPLAYOBJ\" ]; then
		eval echo "$DISPLAYOBJ . finalize \$_shoopfinal_$DISPLAYOBJ\;"
	fi
	# This does not use a non-recursive form, as this code does not
	# need to be fast.  It is only for informative output.
	if [ "$1" = resolve ];then
		for P in $PARENTS; do
			$P . serialize resolve $DISPLAYOBJ
		done
	fi
	return
'
@


1.13
log
@Append ";" to the end of each command, so that new lines can be removed
from the output, without worry of corrupting the command stream.
@
text
@d25 1
a25 1
		local DISPLAYOBJ=$THIS oldargs="$@@"
@


1.12
log
@Add the 'q' flag when saving variables.
@
text
@d28 1
a28 1
			echo "$1 . new $THIS"
d30 1
a30 1
				echo "$THIS . parent $PARENTS"
d48 1
a48 1
			echo
d53 1
a53 1
		eval echo "$DISPLAYOBJ . finalize \$_shoopfinal_$DISPLAYOBJ"
@


1.11
log
@Commenting and adding perldoc stuff.
@
text
@d41 1
a41 1
				echo -n "= "
@


1.10
log
@Changed license to LGPL, and added preliminary inline document support.
@
text
@d16 1
a16 1
## C<FOO . serialize E<gt> save_FOO.sh>
@


1.9
log
@Define the method final instead of finalize.  Modified comments and code
in all introspection type files to be consistent.  Added copyright to
final.sh.
@
text
@d9 1
a9 1
# GPL copyright 2000 by Adam Heath <doogie@@debian.org>
d11 6
@


1.8
log
@Add support for declare methods and variables that are private, and are
invisible to introspection.  Append 'p' to the '=' or ':'.
@
text
@d16 1
a16 1
	local DEFINES A DISPLAYOBJ
d18 2
a19 5
	if [ "$2" ]; then
		DISPLAYOBJ=$2
	else
		DISPLAYOBJ=$THIS
		local oldargs="$@@"
d43 1
a43 1
			eval _shoopseen_$A=1
d49 2
a55 3
	for A in $DEFINES; do
		unset _shoopseen_$A
	done
@


1.7
log
@Remove extraneous ';', as they detract from the code.
@
text
@d15 1
a15 1
IFS=" " OBJECT . serialize : '
@


1.6
log
@Add 'returns' to all defined object methods.
@
text
@d16 2
a17 2
	local DEFINES A DISPLAYOBJ;
	local PARENTS=$($THIS . parent 2>/dev/null);
d19 1
a19 1
		DISPLAYOBJ=$2;
d21 3
a23 3
		DISPLAYOBJ=$THIS;
		local oldargs="$@@";
		set -- $PARENTS;
d25 1
a25 1
			echo "$1 . new $THIS";
d27 7
a33 7
				echo "$THIS . parent $PARENTS";
			fi;
			eval _shoopseen_parent=1;
		fi;
		set -- $oldargs;
	fi;
	eval DEFINES=\$_shoopdefines_$THIS;
d36 1
a36 1
			eval echo -n "$DISPLAYOBJ . $A\ ";
d38 2
a39 2
				echo -n "= ";
				$DISPLAYOBJ . $A;
d41 8
a48 8
				echo -n ": $_shoop_quote";
				IFS=" " eval echo -n "\$_shoop_${THIS}_$A";
				echo -n "$_shoop_quote";
			fi;
			echo ;
			eval _shoopseen_$A=1;
		fi;
	done;
d50 2
a51 2
		eval echo "$DISPLAYOBJ . finalize \$_shoopfinal_$DISPLAYOBJ";
	fi;
d54 3
a56 3
			$P . serialize resolve $DISPLAYOBJ;
		done;
	fi;
d58 2
a59 2
		unset _shoopseen_$A;
	done;
@


1.5
log
@Add object creation to the output.
@
text
@d59 2
a60 1
	done
@


1.4
log
@Can serialize finalized variable/methods now.  Also, the serialized output
of methods retains the original formatting.
@
text
@d17 1
d22 10
d46 1
a46 1
			eval _shoopseen_$A="1";
d53 1
a53 1
		for P in $($THIS . parent 2>/dev/null >/dev/null); do
@


1.3
log
@redid comment
@
text
@d15 1
a15 1
OBJECT . serialize : '
a25 3
			if eval [ \"\$_shoopfinal_${THIS}_$A\" ]; then
				echo -n :;
			fi;
d31 1
a31 1
				eval echo -n "\$_shoop_${THIS}_$A";
d38 3
@


1.2
log
@Renamed BASE to OBJECT
@
text
@d3 2
a4 2
# Introspect module for shoop. Expands the OBJECT class with an introspect
# method, that can list all methods and variables that are defined on a class.
d6 4
a9 1
# Smell the Java. GPL copyright 2000 by Adam Heath <doogie@@debian.org>
@


1.1
log
@Outputs code, that if run, will reconstruct the object.  ie,

FOO . serialize > FOO.sh;
./FOO.sh
@
text
@d3 1
a3 1
# Introspect module for shoop. Expands the BASE class with an introspect
d12 1
a12 1
BASE . serialize : '
@

