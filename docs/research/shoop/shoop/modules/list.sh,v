head	1.12;
access;
symbols;
locks; strict;
comment	@# @;


1.12
date	2001.06.20.19.49.25;	author doogie;	state Exp;
branches;
next	1.11;

1.11
date	2001.03.06.00.54.54;	author doogie;	state Exp;
branches;
next	1.10;

1.10
date	2001.03.02.06.37.25;	author doogie;	state Exp;
branches;
next	1.9;

1.9
date	2001.02.24.02.33.52;	author doogie;	state Exp;
branches;
next	1.8;

1.8
date	2001.02.24.02.02.41;	author doogie;	state Exp;
branches;
next	1.7;

1.7
date	2001.02.21.20.28.09;	author doogie;	state Exp;
branches;
next	1.6;

1.6
date	2001.02.21.19.06.23;	author doogie;	state Exp;
branches;
next	1.5;

1.5
date	2001.02.20.23.03.22;	author doogie;	state Exp;
branches;
next	1.4;

1.4
date	2001.02.20.23.02.00;	author doogie;	state Exp;
branches;
next	1.3;

1.3
date	2001.02.20.23.00.48;	author doogie;	state Exp;
branches;
next	1.2;

1.2
date	2001.02.20.07.24.05;	author doogie;	state Exp;
branches;
next	1.1;

1.1
date	2001.02.20.07.12.52;	author doogie;	state Exp;
branches;
next	;


desc
@@


1.12
log
@POSIX says that variable expansion happens first, before commands are run.
This breaks 'local foo="$@@"'.  So, we separate the call to local, and the
variable assignment, in the $@@ case.
@
text
@OBJECT . new LIST

## Variables:
##>4
##:size
## This holds the number of elements in this list.  As elements are added
## and removed, the value of this variable goes up and down to match.
##:_count
## The next internal pointer to use when adding an element.  This is
## always incremented.
##:_order
## The element number to physical slot mapping is maintained in this
## variable.
##<

LIST . size =q 0
LIST . _count =q 0
LIST . _order =q ''

LIST . add :p '
	local count=$(($($THIS . _count) + 1)) size=$(($($THIS . size) + 1)) order=$($THIS . _order)
	$THIS . _count =q $count
	$THIS . size =q $size
	$THIS . _order =q "${order:+$order }$count"
	$THIS . set $size "$@@"
'
LIST . increase_size :p '
	local count=$(($($THIS . _count) + 1)) neworder order=$($THIS . _order)
	local i=$count
	count=$(($count + $1))
	while [ $i -lt $count ]; do
		neworder="${neworder:+$neworder }$i"
		$THIS . _$i =q ""
		i=$(($i + 1))
	done
	$THIS . _count =q $count
	$THIS . size =q $(($($THIS . size) + $1))
	$THIS . _order =q "${order:+$order }$neworder"
'
LIST . insert :p '
	$THIS . insertat 1 "$@@"
'
LIST . insertat :p '
	local pos="$1"; shift
	local count=$(($($THIS . _count) + 1)) order=$($THIS . _order)
	$THIS . _count =q $count
	$THIS . size =q $(($($THIS . size) + 1))
	$THIS . _order =q "$count${order:+ $order}"
	$THIS . set $pos "$@@"
'
LIST . get :p '
	local pos=$1; shift
	set -- $($THIS . _order)
	eval $THIS . _\$$pos
'
LIST . set :p '
	local pos=$1 args; shift
	eval "args=\"$@@\""
	set -- $($THIS . _order)
	eval $THIS . _\$$pos = \"\$args\"
'
LIST . delete :p '
	local ret left pos=$1 order="$($THIS . _order)"; shift
	$THIS . get $pos
	$THIS . drop $pos
	set -- $order
	eval $THIS d _\$$pos
	shift $(($pos - 1))
	left="${order%%$@@}"
	shift
	$THIS . _order =q "${left:+$left }$@@"
	$THIS . size =q $(($($THIS . size) - 1))
	order="$($THIS . _order)"
	: order $order
'
LIST . drop :p '
	eval $THIS d _\$$1
'
LIST . rol :p '
	local count size=$($THIS . size) order left
	count=$((${1:-1} % $size))
	if [ $count -gt 0 ]; then
		order="$($THIS . _order)"
		set -- $order
		shift $count
		set -- "$@@ ${order%% $@@}"
		$THIS . _order =q "$@@"
	fi
'
LIST . ror :p '
	local count size=$($THIS . size) order left
	count=$(($size - (${1:-1} % $size)))
	if [ $count -gt 0 ]; then
		order="$($THIS . _order)"
		set -- $order
		shift $count
		set -- "$@@ ${order%% $@@}"
		$THIS . _order =q "$@@"
	fi
'
@


1.11
log
@_order was having extra spaces inserted in certain cases, and this was
breaking rol and ror.
@
text
@d57 2
a58 2
	local pos=$1; shift
	eval "local args=\"$@@\""
@


1.10
log
@Added a drop method, that is called by the high-level delete method.  It
has the same type of use as the low-level get and set methods.
@
text
@d21 1
a21 1
	local count=$(($($THIS . _count) + 1)) size=$(($($THIS . size) + 1))
d24 1
a24 1
	$THIS . _order =q "$($THIS . _order) $count"
d28 1
a28 1
	local count=$(($($THIS . _count) + 1)) neworder
d38 1
a38 1
	$THIS . _order =q "$($THIS . _order) $neworder"
d45 1
a45 1
	local count=$(($($THIS . _count) + 1))
d48 1
a48 1
	$THIS . _order =q "$count $($THIS . _order)"
d71 1
a71 1
	$THIS . _order =q "$left $@@"
d86 1
a86 1
		set -- "$@@ ${order%%$@@}"
d97 1
a97 1
		set -- "$@@ ${order%%$@@}"
@


1.9
log
@Remove the local size variable, and when assigning the default null value
to new entries, make it quiet.
@
text
@d65 1
d75 3
@


1.8
log
@Add an increase_size method, with tests.  Not documented yet.
@
text
@d28 1
a28 1
	local count=$(($($THIS . _count) + 1)) size=$(($($THIS . size) + $1)) neworder
d33 1
a33 1
		$THIS . _$i = ""
d37 1
a37 1
	$THIS . size =q $size
@


1.7
log
@Various fixes to make it behave better under zsh's ksh emulation.  It does
not work under pure zsh, however, due to what appears to be a bug in zsh.
Shoop also currently works in ksh, bash, and ash.
@
text
@d27 13
@


1.6
log
@Add some documentation.
@
text
@d45 1
a45 1
	local args="$@@"
@


1.5
log
@Add 'ror' and 'rol' methods.
@
text
@d3 13
@


1.4
log
@When deleting, dereference the object after the order is set(clear, no?)
@
text
@d49 22
@


1.3
log
@The add method was attempting to set the 'count' slot, instead of the 'size'
slot.  However, the set method does it's own dereferencing, so it should be
passed the virtual address, not the real address.
@
text
@d39 1
a40 1
	set -- $order
@


1.2
log
@Remove the internal TODO item, as it was done in the first checkin.
@
text
@d8 1
a8 1
	local count=$(($($THIS . _count) + 1))
d10 1
a10 1
	$THIS . size =q $(($($THIS . size) + 1))
d12 1
a12 1
	$THIS . set $count "$@@"
@


1.1
log
@Added LIST module.  No documentation yet.
@
text
@a0 3
# TODO
# erase variables(requires shoop.sh support)

@

