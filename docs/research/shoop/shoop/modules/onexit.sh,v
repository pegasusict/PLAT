head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2001.02.24.01.33.36;	author doogie;	state Exp;
branches;
next	1.3;

1.3
date	2001.02.21.19.06.23;	author doogie;	state Exp;
branches;
next	1.2;

1.2
date	2001.02.21.15.50.32;	author doogie;	state Exp;
branches;
next	1.1;

1.1
date	2001.02.20.23.07.56;	author doogie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Typo in docs.
@
text
@OBJECT . use stack
STACK . new ONEXIT

## This module allows for running of several commands when the shell
## script exits.  It inherits from stack.sh, so the normal add/insert/
## push/pop commands are available.  Note, that add/insert do not
## return what was passed to them.  pop does, however.
## 
## When the end of the script is reached, the code that is run iterates
## over all registered ONEXIT objects.  These objects are automatically
## registred with the system, when you instantiate(new) them.  If you
## use the 'inew' method, however, it inserts at the end of the list
## the new object, instead of placing it at the end(the default).
ONEXIT . add :p '
	$THIS . super "$@@" > /dev/null
'
ONEXIT . insert :p '
	$THIS . super "$@@" > /dev/null
'
ONEXIT . new :p '
	local OBJNAME=$1
	$THIS . super "$@@"
	$OBJNAME . size =q 0
	$OBJNAME . _count =q 0
	$OBJNAME . _order =q ""
	ONEXIT . add "$OBJNAME . run"
'
ONEXIT . inew :p '
	local OBJNAME=$1
	$THIS . new "$@@"
	ONEXIT . ror
'
ONEXIT . run :p '
	local count=1 size=$($THIS . size)
	while [ $count -le $size ]; do
		eval $($THIS . get $count)
		count=$(($count + 1))
	done
'
@


1.3
log
@Add some documentation.
@
text
@d6 1
a6 1
## push/pop commands are available.  Note, that add/insert to not
@


1.2
log
@Oops.  Was using ' inside of '', which failed when the last feature was
added to _shoop.  Always run make test when changing shoop.sh.
@
text
@d4 10
@


1.1
log
@Add preliminary onexit module.  The code works, but it doesn't yet hook
inself into running when the script exits.
@
text
@d15 1
a15 1
	$OBJNAME . _order =q ''
@

