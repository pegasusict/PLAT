head	1.6;
access;
symbols;
locks; strict;
comment	@# @;


1.6
date	2000.02.13.04.27.58;	author doogie;	state Exp;
branches;
next	1.5;

1.5
date	2000.02.08.00.20.27;	author doogie;	state Exp;
branches;
next	1.4;

1.4
date	2000.02.06.04.24.42;	author doogie;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.06.04.16.55;	author doogie;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.06.00.55.07;	author doogie;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.03.05.02.00;	author doogie;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Commenting and adding perldoc stuff.
@
text
@#!/bin/sh -e
#
# Multiple inheritance module for shoop.  Walks the object tree, looking for
# loops(A from B, B from C, C from A type inheritance), and removes any
# parent from the assignment that has a loop.
#
# This only adds new parents.  It doesn't replace.
#
# For example: FOO . also_inherit BAR BAZ
#
# LGPL copyright 2000 by Adam Heath <doogie@@debian.org>

## This module adds a method that lets an object inherit from multiple
## parents.  It will make sure there are no inheritance loops, before
## adding the new objects to this classes parents.

IFS=" " OBJECT . also_inherit : '
	eval local a curp=$1 newparents="" parents="" retval=0 lastp _seen_child_$THIS=1 p
	eval set -- $(eval eval "\$_shoop_${THIS}_parent") "$@@"

	while [ $# -gt 0 ];do
		if [ "$1" = "}" ]; then
			while [ "$1" = "}" ]; do
				: Pop the stack
				eval unset _seen_unset_$2 \$_seen_unset_$2
				lastp=$2
				shift 2
			done
			curp=$1
			if [ -z \"\$bad_parent_$lastp\" ] ; then
				newparents="$newparents $lastp"
			fi
		fi
		# We have processed this node, so skip it.
		if eval [ \"\$visited_$1\" ]; then
			shift
		elif eval [ \"\$_seen_child_$1\" ]; then
			# Parent Loop : $THIS $curp
			local bad_parent_$curp=1 retval=1 visited_$1=1; shift
			echo "Parent loop detected. $THIS:$curp"
		else
			eval local visited_$1=1 _seen_unset_$curp=\"\$_seen_unset_$curp _seen_child_$1\" _seen_child_$1=1 parents=$(eval eval "\$_shoop_${1}_parent") p=$1; shift
			if [ "$parents" ];then
				set -- $parents "}" "$p" "$@@"
			fi
		fi;
	done
	# newparents is $newparents
	$THIS . parents .= $newparents
	return $retval
'
@


1.5
log
@Changed license to LGPL, and added preliminary inline document support.
@
text
@d13 4
@


1.4
log
@Added brief intros and copyrights to files.
@
text
@d11 1
a11 1
# GPL copyright 2000 by Adam Heath <doogie@@debian.org>
@


1.3
log
@Remove extraneous ';', as they detract from the code.
@
text
@d1 12
@


1.2
log
@Got a 7.5% speedup.  Still takes longer than I want.
@
text
@d2 2
a3 2
	eval local a curp=$1 newparents="" parents="" retval=0 lastp _seen_child_$THIS=1 p;
	eval set -- $(eval eval "\$_shoop_${THIS}_parent") "$@@";
d8 6
a13 6
				: Pop the stack;
				eval unset _seen_unset_$2 \$_seen_unset_$2;
				lastp=$2;
				shift 2;
			done;
			curp=$1;
d20 1
a20 1
			shift;
d22 2
a23 2
			# Parent Loop : $THIS $curp;
			local bad_parent_$curp=1 retval=1 visited_$1=1; shift;
d26 1
a26 1
			eval local visited_$1=1 _seen_unset_$curp=\"\$_seen_unset_$curp _seen_child_$1\" _seen_child_$1=1 parents=$(eval eval "\$_shoop_${1}_parent") p=$1; shift;
d31 2
a32 2
	done;
	# newparents is $newparents;
@


1.1
log
@Add new module also_inherit, which walks the parent tree, looking for loops.
This is currently not fully integrated with the system, and is just an
addon module, that doesn't do anything.  Also added a benchmark for it.
@
text
@d2 1
a2 1
	eval local a curp=$1 newparents="" parents="" retval=0 lastp _seen_child_$THIS=1;
d10 1
a10 1
				lastp=$2 curp=$3;
d13 2
a14 4
			if eval [ \"\$bad_parent_$lastp\" ]; then
				retval=1;
				echo "Parent loop detected. $THIS:$lastp"
			else
d16 1
a16 1
			fi;
d20 2
a21 4
			shift
			continue
		fi;
		if eval local visited_$1=1\; [ \"\$_seen_child_$1\" ]; then
d23 2
a24 3
			local bad_parent_$curp=1;
			shift;
			continue
d26 1
a26 3
			eval local _seen_child_$1=1 _seen_unset_$curp=\"\$_seen_unset_$curp _seen_child_$1\"\;
				parents=$(eval eval "\$_shoop_$1_parent") p=$1;
			shift;
a33 1
	echo "newparents is $newparents" >&2;
a35 2
#		eval local visited_$1=1;
#		if eval [ \"\$_seen_child_$1\" ]; then
@

